<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 작성자: 정택준 -->
<mapper namespace="personnel">
    <select id="findByEmpNameContaining" resultType="java.util.Map">
        SELECT e.emp_idx, u.emp_name, e.pay_grade, e.position, e.dept_name, e.hire_date,
               e.employment_type, s.base_salary AS salary, s.bonus
        FROM employee e
        INNER JOIN users u ON e.user_idx = u.user_idx
        LEFT JOIN request r ON e.emp_idx = r.emp_idx
        LEFT JOIN salary s ON r.request_idx = s.request_idx
        WHERE u.emp_name LIKE CONCAT('%', #{keyword}, '%')
    </select>

    <select id="findByDeptNameContaining" resultType="java.util.Map">
        SELECT e.emp_idx, u.emp_name, e.pay_grade, e.position, e.dept_name, e.hire_date,
               e.employment_type, s.base_salary AS salary, s.bonus
        FROM employee e
        INNER JOIN users u ON e.user_idx = u.user_idx
        LEFT JOIN request r ON e.emp_idx = r.emp_idx
        LEFT JOIN salary s ON r.request_idx = s.request_idx
        WHERE e.dept_name LIKE CONCAT('%', #{keyword}, '%')
    </select>

    <select id="findByPositionContaining" resultType="java.util.Map">
        SELECT e.emp_idx, u.emp_name, e.pay_grade, e.position, e.dept_name, e.hire_date,
               e.employment_type, s.base_salary AS salary, s.bonus
        FROM employee e
        INNER JOIN users u ON e.user_idx = u.user_idx
        LEFT JOIN request r ON e.emp_idx = r.emp_idx
        LEFT JOIN salary s ON r.request_idx = s.request_idx
        WHERE e.position LIKE CONCAT('%', #{keyword}, '%')
    </select>
    
    <!-- 작성자: 김용호 -->
    <select id="getAllVacations" resultType="java.util.HashMap">
		SELECT  
			v.vacation_id, 
			e.position, 
			u.emp_name, 
			DATE_FORMAT(v.start_date, '%Y-%m-%d') AS start_date, 
            DATE_FORMAT(v.end_date, '%Y-%m-%d') AS end_date, 
			v.vacation_type, 
			v.status, 
			v.comment 
		FROM 
		Vacation v 
			INNER JOIN Request r ON v.request_idx = r.request_idx 
			INNER JOIN Employee e ON r.emp_idx = e.emp_idx 
			INNER JOIN Users u ON e.user_idx = u.user_idx 
		WHERE  
			u.remove = 0 
		ORDER BY  
			v.start_date DESC 
	</select>
	
	<select id="getAllApprovals" resultType="java.util.HashMap">
		SELECT  
			v.vacation_id, 
			e.team, 
			e.position, 
			u.emp_name, 
			e.emp_idx, 
			DATE_FORMAT(v.start_date, '%Y-%m-%d') AS start_date, 
            DATE_FORMAT(v.end_date, '%Y-%m-%d') AS end_date, 
			v.vacation_type, 
			v.status, 
			v.comment 
		FROM 
		Vacation v 
			INNER JOIN Request r ON v.request_idx = r.request_idx 
			INNER JOIN Employee e ON r.emp_idx = e.emp_idx 
			INNER JOIN Users u ON e.user_idx = u.user_idx 
		WHERE  
			u.remove = 0 
		ORDER BY  
			v.start_date DESC 
	</select>
	<update id="updateVacationStatus">
		update vacation 
		set status = #{status}, comment = #{comment} 
		where vacation_id = #{vacation_id}
	</update>

	<!-- 작성자 : 한찬욱 -->
	<!-- 관리자의 근무지 이동 신청을 받은 테이블 조회 -->
	<select id="getPersonChangeInfor" resultType="java.util.Map">
		SELECT 
			e.emp_id,
			e.emp_idx,
			u.emp_name,
			e.team,
			e.position,
			u.emp_email,
			r.request_text,
			r.request_personnelchange,
			pc.prev_location_id,
			pc.new_location_id,
			r.request_idx,
			rl.logging_idx,
			rl.logging_personnelchange
		FROM Request r
		LEFT JOIN employee e ON r.emp_idx = e.emp_idx
		LEFT JOIN users u ON e.user_idx = u.user_idx
		LEFT JOIN personnelchange pc ON r.request_idx = pc.request_idx
		LEFT JOIN requestlogging rl ON r.request_idx = rl.request_idx
		WHERE r.request_personnelchange = 1
		ORDER BY r.request_idx DESC
	</select>

	<!-- 이동 신청 기록 존재 여부 확인 -->
	<select id="checkRequestLoggingExists" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM requestlogging 
		WHERE request_idx = CAST(#{request_idx} AS SIGNED)
		AND logging_personnelchange IS NOT NULL
	</select>

	<!-- 이동 신청 기록 업데이트 -->
	<update id="updateLoggingpersonnelChangeStatus" parameterType="java.util.Map">
		<choose>
			<when test="recordExists == 1">
				UPDATE requestlogging rl
				INNER JOIN request r ON rl.request_idx = r.request_idx
				INNER JOIN personnelchange pc ON r.request_idx = pc.request_idx
				INNER JOIN employee e ON r.emp_idx = e.emp_idx
				SET rl.logging_personnelchange = #{logging_personnelchange},
					rl.request_text = #{request_text},
					rl.logging_date = now(),
					pc.prev_location_id = e.location,
					pc.new_location_id = #{new_location_id}
				WHERE rl.request_idx = CAST(#{request_idx} AS SIGNED)
			</when>
			<otherwise>
				INSERT INTO requestlogging
				(request_idx, logging_personnelchange, request_text, logging_date)
				VALUES(CAST(#{request_idx} AS SIGNED), #{logging_personnelchange}, #{request_text}, now())
			</otherwise>
		</choose>
	</update>

	<update id="updatePersonnelChangeLocation" parameterType="java.util.Map">
		UPDATE personnelchange pc
		INNER JOIN request r ON pc.request_idx = r.request_idx
		INNER JOIN employee e ON r.emp_idx = e.emp_idx
		SET pc.prev_location_id = e.location,
			pc.new_location_id = #{new_location_id}
		WHERE pc.request_idx = CAST(#{request_idx} AS SIGNED)
	</update>

	<!-- 이동 신청 이력 초기화 -->
	<update id="resetPersonChangeStatus">
		update request
		set request_personnelchange = 0
		where request_idx = #{request_idx}
	</update>

</mapper>






