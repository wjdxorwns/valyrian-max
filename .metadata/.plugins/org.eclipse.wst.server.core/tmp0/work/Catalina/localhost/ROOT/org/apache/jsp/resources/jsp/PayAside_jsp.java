/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-05-06 07:01:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.resources.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class PayAside_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1743573402475L));
    _jspx_dependants.put("jar:file:/D:/workspaces/pj/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/project/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<!-- 정택준 -->\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\r\n");
      out.write("aside {\r\n");
      out.write("    position: absolute;\r\n");
      out.write("    top: 80px;\r\n");
      out.write("    left: 0;\r\n");
      out.write("    width: 250px;\r\n");
      out.write("    background-color: #ffffff;\r\n");
      out.write("    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);\r\n");
      out.write("    z-index: 9997; \r\n");
      out.write("    height: 850px;\r\n");
      out.write("    \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("aside .aside-item {\r\n");
      out.write("    padding: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("aside .aside-item h2 {\r\n");
      out.write("    font-size: 20px;\r\n");
      out.write("    font-weight: 400;\r\n");
      out.write("    color: #003399;\r\n");
      out.write("    margin-bottom: 15px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("aside .aside-item ul {\r\n");
      out.write("    list-style: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("aside .aside-item ul li {\r\n");
      out.write("    margin-bottom: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("aside .aside-item ul li a {\r\n");
      out.write("    text-decoration: none;\r\n");
      out.write("    color: #333;\r\n");
      out.write("    font-size: 16px;\r\n");
      out.write("    font-weight: 300;\r\n");
      out.write("    display: block;\r\n");
      out.write("    padding: 5px 0;\r\n");
      out.write("    transition: color 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("aside .aside-item ul li a:hover {\r\n");
      out.write("    color: #3498db;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<aside  id=\"scrollable-aside\">\r\n");
      out.write("	<div class= \"aside-item\">\r\n");
      out.write("     <h2>급여관리</h2>\r\n");
      out.write("        <ul>\r\n");
      out.write("            <li><a href=\"/payrollList\">급여 리스트 조회</a></li>\r\n");
      out.write("            <li><a href=\"/payrollGrade\">직급별 급여 리스트</a></li>\r\n");
      out.write("        </ul>\r\n");
      out.write("       </div>\r\n");
      out.write("</aside>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("    function adjustAsidePosition() {\r\n");
      out.write("        const aside = document.getElementById('scrollable-aside');\r\n");
      out.write("        const footer = document.querySelector('footer');\r\n");
      out.write("        const headerHeight = 80; \r\n");
      out.write("        const scrollY = window.scrollY;\r\n");
      out.write("		\r\n");
      out.write("  \r\n");
      out.write("        if (!footer) {\r\n");
      out.write("            aside.style.top = `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${scrollY + headerHeight}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("px`;\r\n");
      out.write("            return;\r\n");
      out.write("        }\r\n");
      out.write("        const footerTop = footer.getBoundingClientRect().top + scrollY; \r\n");
      out.write("       \r\n");
      out.write("        const maxTop = footerTop - aside.offsetHeight;\r\n");
      out.write("  \r\n");
      out.write("        let newTop = scrollY + headerHeight;\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("        if (newTop > maxTop) {\r\n");
      out.write("            newTop = maxTop;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("       \r\n");
      out.write("        aside.style.top = `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${newTop}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("px`;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("    document.addEventListener('DOMContentLoaded', () => {\r\n");
      out.write("        adjustAsidePosition();\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 스크롤 및 리사이즈 이벤트에 위치 조정 함수 연결\r\n");
      out.write("    window.addEventListener('scroll', adjustAsidePosition);\r\n");
      out.write("    window.addEventListener('resize', adjustAsidePosition);\r\n");
      out.write("\r\n");
      out.write("    // 푸터가 동적으로 로드될 경우를 대비해 주기적으로 체크\r\n");
      out.write("    setTimeout(adjustAsidePosition, 1000); // 1초 후 재시도\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
