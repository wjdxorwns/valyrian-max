/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-05-13 08:42:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.MainPage;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class workingCalendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1743573402475L));
    _jspx_dependants.put("jar:file:/D:/workspaces/pj/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/project/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <title>내 할일 달력</title>\n");
      out.write("    <!-- FullCalendar CSS (CDN) -->\n");
      out.write("    <link href=\"");
      if (_jspx_meth_c_005furl_005f0(_jspx_page_context))
        return;
      out.write("\" rel=\"stylesheet\">\n");
      out.write("    <!-- FullCalendar & Plugins (CDN Only버전 라이브러리들) -->\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/fullcalendar@6.1.17/index.global.min.js\"></script>\n");
      out.write("    <!-- 프로젝트 CSS -->\n");
      out.write("    <link href=\"");
      if (_jspx_meth_c_005furl_005f1(_jspx_page_context))
        return;
      out.write("\" rel=\"stylesheet\">\n");
      out.write("    <link href=\"");
      if (_jspx_meth_c_005furl_005f2(_jspx_page_context))
        return;
      out.write("\" rel=\"stylesheet\">\n");
      out.write("    <link href=\"");
      if (_jspx_meth_c_005furl_005f3(_jspx_page_context))
        return;
      out.write("\" rel=\"stylesheet\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/resources/jsp/Header.jsp", out, false);
      out.write("\n");
      out.write("	\n");
      out.write("	<main>\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/resources/jsp/MainAside.jsp", out, false);
      out.write("\n");
      out.write("		<div class=\"calendar-wrapper\">\n");
      out.write("			<div class=\"calendar-container\">\n");
      out.write("				<h2>📅 내 할일 달력</h2>\n");
      out.write("				<div id=\"calendar\"></div>\n");
      out.write("			</div>\n");
      out.write("			<div class=\"event-list-container\">\n");
      out.write("				<h3>📋 전체 일정 리스트</h3>\n");
      out.write("				<div id=\"event-list\"></div>\n");
      out.write("			</div>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("		<!-- 일정 추가/상세보기 모달 -->\n");
      out.write("		<div id=\"eventModal\" class=\"modal\">\n");
      out.write("			<div class=\"modal-overlay\"></div>\n");
      out.write("			<div class=\"modal-content\">\n");
      out.write("				<div class=\"modal-header\">\n");
      out.write("					<h3 id=\"modalTitle\">일정 추가</h3>\n");
      out.write("					<span class=\"close\">&times;</span>\n");
      out.write("				</div>\n");
      out.write("				<div class=\"modal-body\">\n");
      out.write("					<form id=\"eventForm\">\n");
      out.write("						<input type=\"hidden\" id=\"eventId\">\n");
      out.write("						<div class=\"form-group\">\n");
      out.write("							<label for=\"eventTitle\">제목</label>\n");
      out.write("							<input type=\"text\" id=\"eventTitle\" required>\n");
      out.write("						</div>\n");
      out.write("						<div class=\"form-group\">\n");
      out.write("							<label for=\"eventStart\">시작일</label>\n");
      out.write("							<input type=\"date\" id=\"eventStart\" required>\n");
      out.write("						</div>\n");
      out.write("						<div class=\"form-group\">\n");
      out.write("							<label for=\"eventEnd\">종료일</label>\n");
      out.write("							<input type=\"date\" id=\"eventEnd\" required>\n");
      out.write("						</div>\n");
      out.write("						<div class=\"form-group\">\n");
      out.write("							<label for=\"eventDescription\">설명</label>\n");
      out.write("							<textarea id=\"eventDescription\" rows=\"3\"></textarea>\n");
      out.write("						</div>\n");
      out.write("						<div class=\"btn-group\">\n");
      out.write("							<button type=\"button\" class=\"btn btn-danger\" id=\"deleteBtn\" style=\"display: none;\">삭제</button>\n");
      out.write("							<button type=\"submit\" class=\"btn btn-primary\">추가</button>\n");
      out.write("						</div>\n");
      out.write("					</form>\n");
      out.write("				</div>\n");
      out.write("			</div>\n");
      out.write("		</div>\n");
      out.write("	</main>\n");
      out.write("\n");
      out.write("	<!-- 사용자 스크립트 -->\n");
      out.write("    <script type=\"text/javascript\">\n");
      out.write("    let calendar;\n");
      out.write("    const modal = document.getElementById('eventModal');\n");
      out.write("    const closeBtn = document.getElementsByClassName('close')[0];\n");
      out.write("    const eventForm = document.getElementById('eventForm');\n");
      out.write("    const deleteBtn = document.getElementById('deleteBtn');\n");
      out.write("\n");
      out.write("    // 디버깅을 위한 로그 함수\n");
      out.write("    function debugLog(message, data = null) {\n");
      out.write("        console.log(`[Calendar Debug] ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${message}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`, data || '');\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // 에러 처리 함수\n");
      out.write("    function handleError(error, message) {\n");
      out.write("        console.error(`[Calendar Error] ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${message}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(":`, error);\n");
      out.write("        alert('오류가 발생했습니다. 다시 시도해주세요.');\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // 모달 닫기\n");
      out.write("    function closeModal() {\n");
      out.write("        debugLog('모달 닫기');\n");
      out.write("        modal.style.display = \"none\";\n");
      out.write("        document.body.style.overflow = '';\n");
      out.write("        resetForm();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // 폼 초기화\n");
      out.write("    function resetForm() {\n");
      out.write("        debugLog('폼 초기화');\n");
      out.write("        eventForm.reset();\n");
      out.write("        deleteBtn.style.display = 'none';\n");
      out.write("        document.getElementById('modalTitle').textContent = '일정 추가';\n");
      out.write("        document.querySelector('button[type=\"submit\"]').textContent = '추가';\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // 일정 리스트 렌더링 함수\n");
      out.write("    function renderEventList(events) {\n");
      out.write("        debugLog('일정 리스트 렌더링', events);\n");
      out.write("        let html = '<table id=\"event-list-table\">';\n");
      out.write("        html += '<thead><tr><th>제목</th><th>시작일</th><th>종료일</th><th>설명</th></tr></thead><tbody>';\n");
      out.write("        if (!events || events.length === 0) {\n");
      out.write("            html += '<tr><td colspan=\"4\">등록된 일정이 없습니다.</td></tr>';\n");
      out.write("        } else {\n");
      out.write("            for (let i = 0; i < events.length; i++) {\n");
      out.write("                const ev = events[i];\n");
      out.write("                html += '<tr onclick=\"openDetailModal(' + JSON.stringify(ev).replace(/\"/g, '&quot;') + ')\" style=\"cursor: pointer;\">'\n");
      out.write("                    + '<td>' + (ev.title || '') + '</td>'\n");
      out.write("                    + '<td>' + (ev.start ? ev.start.substring(0,10) : '') + '</td>'\n");
      out.write("                    + '<td>' + (ev.end ? ev.end.substring(0,10) : '') + '</td>'\n");
      out.write("                    + '<td>' + (ev.description || '') + '</td>'\n");
      out.write("                    + '</tr>';\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        html += '</tbody></table>';\n");
      out.write("        document.getElementById('event-list').innerHTML = html;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // 서버에서 일정 조회\n");
      out.write("    function fetchAndRenderEventList() {\n");
      out.write("        debugLog('일정 목록 조회 시작');\n");
      out.write("        fetch('/calendar/list', {\n");
      out.write("            method: 'GET',\n");
      out.write("            headers: { 'Accept': 'application/json' }\n");
      out.write("        })\n");
      out.write("        .then(resp => {\n");
      out.write("            if (!resp.ok) {\n");
      out.write("                throw new Error('일정 목록 조회 실패');\n");
      out.write("            }\n");
      out.write("            return resp.json();\n");
      out.write("        })\n");
      out.write("        .then(data => {\n");
      out.write("            debugLog('일정 목록 조회 성공', data);\n");
      out.write("            renderEventList(data);\n");
      out.write("        })\n");
      out.write("        .catch(error => handleError(error, '일정 목록 조회 중 오류 발생'));\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // 일정 추가 모달 열기\n");
      out.write("    function openModal(event = null) {\n");
      out.write("        debugLog('모달 열기', event);\n");
      out.write("        try {\n");
      out.write("            const modal = document.getElementById('eventModal');\n");
      out.write("            const modalTitle = document.getElementById('modalTitle');\n");
      out.write("            const eventTitle = document.getElementById('eventTitle');\n");
      out.write("            const eventStart = document.getElementById('eventStart');\n");
      out.write("            const eventEnd = document.getElementById('eventEnd');\n");
      out.write("            const eventDescription = document.getElementById('eventDescription');\n");
      out.write("            const deleteBtn = document.getElementById('deleteBtn');\n");
      out.write("            const submitBtn = document.querySelector('button[type=\"submit\"]');\n");
      out.write("\n");
      out.write("            // 모달 초기화\n");
      out.write("            modalTitle.textContent = '일정 추가';\n");
      out.write("            eventTitle.value = '';\n");
      out.write("            eventStart.value = '';\n");
      out.write("            eventEnd.value = '';\n");
      out.write("            eventDescription.value = '';\n");
      out.write("            \n");
      out.write("            // 입력 필드 활성화\n");
      out.write("            eventTitle.disabled = false;\n");
      out.write("            eventStart.disabled = false;\n");
      out.write("            eventEnd.disabled = false;\n");
      out.write("            eventDescription.disabled = false;\n");
      out.write("            \n");
      out.write("            // 버튼 상태 설정\n");
      out.write("            deleteBtn.style.display = 'none';\n");
      out.write("            submitBtn.style.display = 'inline-block';\n");
      out.write("            submitBtn.textContent = '추가';\n");
      out.write("            \n");
      out.write("            modal.style.display = \"block\";\n");
      out.write("            document.body.style.overflow = 'hidden';\n");
      out.write("        } catch (error) {\n");
      out.write("            handleError(error, '모달 열기 중 오류 발생');\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write(" // 일정 상세보기 모달 열기\n");
      out.write("    function openDetailModal(event) {\n");
      out.write("        debugLog('상세보기 모달 열기', event);\n");
      out.write("        try {\n");
      out.write("            // ... (필드 세팅 부분 동일)\n");
      out.write("            const eventTitle = document.getElementById('eventTitle');\n");
      out.write("            const eventStart = document.getElementById('eventStart');\n");
      out.write("            const eventEnd = document.getElementById('eventEnd');\n");
      out.write("            const eventDescription = document.getElementById('eventDescription');\n");
      out.write("            const deleteBtn = document.getElementById('deleteBtn');\n");
      out.write("            const submitBtn = document.querySelector('button[type=\"submit\"]');\n");
      out.write("            const modalTitle = document.getElementById('modalTitle');\n");
      out.write("\n");
      out.write("            modalTitle.textContent = '일정 상세보기';\n");
      out.write("\n");
      out.write("            // 날짜 형식 변환\n");
      out.write("            const startDate = event.start instanceof Date ? event.start.toISOString().split('T')[0] : event.start;\n");
      out.write("            const endDate = event.end instanceof Date ? event.end.toISOString().split('T')[0] : event.end;\n");
      out.write("            eventTitle.value = event.title || '';\n");
      out.write("            eventStart.value = startDate;\n");
      out.write("            eventEnd.value = endDate;\n");
      out.write("            eventDescription.value = event.description || '';\n");
      out.write("\n");
      out.write("            // 입력 필드 비활성화\n");
      out.write("            eventTitle.disabled = true;\n");
      out.write("            eventStart.disabled = true;\n");
      out.write("            eventEnd.disabled = true;\n");
      out.write("            eventDescription.disabled = true;\n");
      out.write("\n");
      out.write("            // 버튼 상태 설정\n");
      out.write("            deleteBtn.style.display = 'inline-block';\n");
      out.write("            submitBtn.style.display = 'none';\n");
      out.write("\n");
      out.write("            // 기존 수정 버튼 제거\n");
      out.write("            const existingEditBtn = deleteBtn.parentNode.querySelector('.btn-edit');\n");
      out.write("            if (existingEditBtn) existingEditBtn.remove();\n");
      out.write("\n");
      out.write("            // 수정 버튼 생성 및 추가\n");
      out.write("            const editBtn = document.createElement('button');\n");
      out.write("            editBtn.className = 'btn btn-primary btn-edit';\n");
      out.write("            editBtn.textContent = '수정';\n");
      out.write("            editBtn.type = 'button';\n");
      out.write("            editBtn.style.marginRight = '10px';\n");
      out.write("            deleteBtn.parentNode.insertBefore(editBtn, deleteBtn);\n");
      out.write("\n");
      out.write("            // 수정 버튼 클릭 시\n");
      out.write("            editBtn.onclick = function() {\n");
      out.write("                // 입력 필드 활성화\n");
      out.write("                eventTitle.disabled = false;\n");
      out.write("                eventStart.disabled = false;\n");
      out.write("                eventEnd.disabled = false;\n");
      out.write("                eventDescription.disabled = false;\n");
      out.write("\n");
      out.write("                // 버튼 상태 변경\n");
      out.write("                editBtn.style.display = 'none';\n");
      out.write("                deleteBtn.style.display = 'none';\n");
      out.write("                submitBtn.style.display = 'inline-block';\n");
      out.write("                submitBtn.textContent = '저장';\n");
      out.write("\n");
      out.write("                // 기존 폼 핸들러 제거 후 새로 등록 (중복 방지)\n");
      out.write("                eventForm.onsubmit = function(e) {\n");
      out.write("                    e.preventDefault();\n");
      out.write("                    const formData = {\n");
      out.write("                        calendar_idx: event.id,\n");
      out.write("                        title: eventTitle.value,\n");
      out.write("                        start_day: eventStart.value,\n");
      out.write("                        end_day: eventEnd.value,\n");
      out.write("                        comment: eventDescription.value\n");
      out.write("                    };\n");
      out.write("\n");
      out.write("                    if (new Date(formData.start_day) > new Date(formData.end_day)) {\n");
      out.write("                        alert('종료일은 시작일보다 이후여야 합니다.');\n");
      out.write("                        return;\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    fetch('/calendar/update', {\n");
      out.write("                        method: 'POST',\n");
      out.write("                        headers: {\n");
      out.write("                            'Content-Type': 'application/json',\n");
      out.write("                            'Accept': 'application/json'\n");
      out.write("                        },\n");
      out.write("                        body: JSON.stringify(formData)\n");
      out.write("                    })\n");
      out.write("                    .then(resp => {\n");
      out.write("                        if (!resp.ok) throw new Error('일정 수정 실패');\n");
      out.write("                        return resp;\n");
      out.write("                    })\n");
      out.write("                    .then(() => {\n");
      out.write("                        calendar.refetchEvents();\n");
      out.write("                        fetchAndRenderEventList();\n");
      out.write("                        modal.style.display = \"none\";\n");
      out.write("                        alert('일정이 수정되었습니다.');\n");
      out.write("                        // 폼 핸들러를 다시 추가 모드로 복원\n");
      out.write("                        eventForm.onsubmit = addFormHandler;\n");
      out.write("                    })\n");
      out.write("                    .catch(error => {\n");
      out.write("                        handleError(error, '일정 수정 중 오류 발생');\n");
      out.write("                        calendar.refetchEvents();\n");
      out.write("                    });\n");
      out.write("                };\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            // 삭제 버튼 이벤트 핸들러\n");
      out.write("            deleteBtn.onclick = function() {\n");
      out.write("                if (confirm('정말로 이 일정을 삭제하시겠습니까?')) {\n");
      out.write("                    var deleteUrl = '/calendar/delete/' + event.id; // 백틱 대신 + 연산자\n");
      out.write("                    fetch(deleteUrl, {\n");
      out.write("                        method: 'POST',\n");
      out.write("                        headers: {\n");
      out.write("                            'Content-Type': 'application/json',\n");
      out.write("                            'Accept': 'application/json'\n");
      out.write("                        }\n");
      out.write("                    })\n");
      out.write("                    .then(resp => {\n");
      out.write("                        if (!resp.ok) throw new Error('일정 삭제 실패');\n");
      out.write("                        return resp;\n");
      out.write("                    })\n");
      out.write("                    .then(() => {\n");
      out.write("                        calendar.refetchEvents();\n");
      out.write("                        fetchAndRenderEventList();\n");
      out.write("                        modal.style.display = \"none\";\n");
      out.write("                        alert('일정이 삭제되었습니다.');\n");
      out.write("                    })\n");
      out.write("                    .catch(error => {\n");
      out.write("                        handleError(error, '일정 삭제 중 오류 발생');\n");
      out.write("                        calendar.refetchEvents();\n");
      out.write("                    });\n");
      out.write("                }\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            modal.style.display = \"block\";\n");
      out.write("            document.body.style.overflow = 'hidden';\n");
      out.write("        } catch (error) {\n");
      out.write("            handleError(error, '상세보기 모달 열기 중 오류 발생');\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // 새 일정 추가용 폼 핸들러(최초 1회만 등록)\n");
      out.write("    function addFormHandler(e) {\n");
      out.write("        e.preventDefault();\n");
      out.write("        debugLog('폼 제출');\n");
      out.write("        try {\n");
      out.write("            const formData = {\n");
      out.write("                title: document.getElementById('eventTitle').value,\n");
      out.write("                start_day: document.getElementById('eventStart').value,\n");
      out.write("                end_day: document.getElementById('eventEnd').value,\n");
      out.write("                comment: document.getElementById('eventDescription').value\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            if (new Date(formData.start_day) > new Date(formData.end_day)) {\n");
      out.write("                alert('종료일은 시작일보다 이후여야 합니다.');\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            const url = '/calendar/add';\n");
      out.write("            fetch(url, {\n");
      out.write("                method: 'POST',\n");
      out.write("                headers: {\n");
      out.write("                    'Content-Type': 'application/json',\n");
      out.write("                    'Accept': 'application/json'\n");
      out.write("                },\n");
      out.write("                body: JSON.stringify(formData)\n");
      out.write("            })\n");
      out.write("            .then(resp => {\n");
      out.write("                if (!resp.ok) throw new Error('일정 저장 실패');\n");
      out.write("                return resp;\n");
      out.write("            })\n");
      out.write("            .then(() => {\n");
      out.write("                calendar.refetchEvents();\n");
      out.write("                fetchAndRenderEventList();\n");
      out.write("                modal.style.display = \"none\";\n");
      out.write("                resetForm();\n");
      out.write("                alert('일정이 저장되었습니다.');\n");
      out.write("            })\n");
      out.write("            .catch(error => handleError(error, '일정 저장 중 오류 발생'));\n");
      out.write("        } catch (error) {\n");
      out.write("            handleError(error, '폼 제출 중 오류 발생');\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("    // 최초 한 번만 등록\n");
      out.write("    eventForm.onsubmit = addFormHandler;\n");
      out.write("\n");
      out.write("\n");
      out.write("    window.onclick = function(event) {\n");
      out.write("        const modal = document.getElementById('eventModal');\n");
      out.write("        if (event.target == modal) {\n");
      out.write("            closeModal();\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // FullCalendar 초기화\n");
      out.write("    document.addEventListener('DOMContentLoaded', function () {\n");
      out.write("        debugLog('FullCalendar 초기화 시작');\n");
      out.write("        try {\n");
      out.write("            const calendarEl = document.getElementById('calendar');\n");
      out.write("            calendar = new FullCalendar.Calendar(calendarEl, {\n");
      out.write("                initialView: 'dayGridMonth',\n");
      out.write("                headerToolbar: {\n");
      out.write("                    left: 'prev,next today',\n");
      out.write("                    center: 'title',\n");
      out.write("                    right: 'dayGridMonth,timeGridWeek'\n");
      out.write("                },\n");
      out.write("                editable: true,\n");
      out.write("                eventResizableFromStart: true,\n");
      out.write("                events: {\n");
      out.write("                    url: '/calendar/list',\n");
      out.write("                    method: 'GET',\n");
      out.write("                    headers: { 'Accept': 'application/json' },\n");
      out.write("                    failure: function(error) {\n");
      out.write("                        handleError(error, '일정 로드 중 오류 발생');\n");
      out.write("                    }\n");
      out.write("                },\n");
      out.write("                dateClick: function (info) {\n");
      out.write("                    debugLog('날짜 클릭', info);\n");
      out.write("                    openModal();\n");
      out.write("                    document.getElementById('eventStart').value = info.dateStr;\n");
      out.write("                    document.getElementById('eventEnd').value = info.dateStr;\n");
      out.write("                },\n");
      out.write("                eventClick: function (info) {\n");
      out.write("                    console.log('일정 클릭 이벤트 발생');\n");
      out.write("                    console.log('클릭된 일정 정보:', {\n");
      out.write("                        id: info.event.id,\n");
      out.write("                        calendar_idx: info.event.extendedProps?.calendar_idx,\n");
      out.write("                        title: info.event.title,\n");
      out.write("                        start: info.event.start,\n");
      out.write("                        end: info.event.end,\n");
      out.write("                        description: info.event.extendedProps?.description\n");
      out.write("                    });\n");
      out.write("                    \n");
      out.write("                    const event = {\n");
      out.write("                        id: info.event.extendedProps?.calendar_idx || info.event.id,\n");
      out.write("                        title: info.event.title,\n");
      out.write("                        start: info.event.start,\n");
      out.write("                        end: info.event.end,\n");
      out.write("                        description: info.event.extendedProps?.description || ''\n");
      out.write("                    };\n");
      out.write("                    console.log('변환된 일정 정보:', event);\n");
      out.write("                    openDetailModal(event);\n");
      out.write("                },\n");
      out.write("                eventDrop: function (info) {\n");
      out.write("                    debugLog('일정 드래그', info);\n");
      out.write("                    const updated = {\n");
      out.write("                        calendar_idx: info.event.id,\n");
      out.write("                        title: info.event.title,\n");
      out.write("                        comment: info.event.extendedProps?.description || '',\n");
      out.write("                        start_day: info.event.startStr,\n");
      out.write("                        end_day: info.event.endStr || info.event.startStr\n");
      out.write("                    };\n");
      out.write("                    fetch('/calendar/update', {\n");
      out.write("                        method: 'POST',\n");
      out.write("                        headers: { \n");
      out.write("                            'Content-Type': 'application/json',\n");
      out.write("                            'Accept': 'application/json'\n");
      out.write("                        },\n");
      out.write("                        body: JSON.stringify(updated)\n");
      out.write("                    })\n");
      out.write("                    .then(resp => {\n");
      out.write("                        if (!resp.ok) throw new Error('일정 업데이트 실패');\n");
      out.write("                        return resp;\n");
      out.write("                    })\n");
      out.write("                    .then(() => {\n");
      out.write("                        calendar.refetchEvents();\n");
      out.write("                        fetchAndRenderEventList();\n");
      out.write("                    })\n");
      out.write("                    .catch(error => {\n");
      out.write("                        handleError(error, '일정 드래그 중 오류 발생');\n");
      out.write("                        calendar.refetchEvents();\n");
      out.write("                    });\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("            calendar.render();\n");
      out.write("            fetchAndRenderEventList();\n");
      out.write("            debugLog('FullCalendar 초기화 완료');\n");
      out.write("        } catch (error) {\n");
      out.write("            handleError(error, 'FullCalendar 초기화 중 오류 발생');\n");
      out.write("        }\n");
      out.write("    });\n");
      out.write("    </script>\n");
      out.write("\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/resources/jsp/Footer.jsp", out, false);
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005furl_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f0 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    _jspx_th_c_005furl_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005furl_005f0.setParent(null);
    // /WEB-INF/views/MainPage/workingCalendar.jsp(10,16) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005furl_005f0.setValue("/resources/css/KimJK/CSS_working_calendar.css");
    int _jspx_eval_c_005furl_005f0 = _jspx_th_c_005furl_005f0.doStartTag();
    if (_jspx_th_c_005furl_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005furl_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f1 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    _jspx_th_c_005furl_005f1.setPageContext(_jspx_page_context);
    _jspx_th_c_005furl_005f1.setParent(null);
    // /WEB-INF/views/MainPage/workingCalendar.jsp(14,16) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005furl_005f1.setValue("/resources/css/Main.css");
    int _jspx_eval_c_005furl_005f1 = _jspx_th_c_005furl_005f1.doStartTag();
    if (_jspx_th_c_005furl_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f1);
    return false;
  }

  private boolean _jspx_meth_c_005furl_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f2 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    _jspx_th_c_005furl_005f2.setPageContext(_jspx_page_context);
    _jspx_th_c_005furl_005f2.setParent(null);
    // /WEB-INF/views/MainPage/workingCalendar.jsp(15,16) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005furl_005f2.setValue("/resources/css/Header.css");
    int _jspx_eval_c_005furl_005f2 = _jspx_th_c_005furl_005f2.doStartTag();
    if (_jspx_th_c_005furl_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f2);
    return false;
  }

  private boolean _jspx_meth_c_005furl_005f3(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f3 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    _jspx_th_c_005furl_005f3.setPageContext(_jspx_page_context);
    _jspx_th_c_005furl_005f3.setParent(null);
    // /WEB-INF/views/MainPage/workingCalendar.jsp(16,16) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005furl_005f3.setValue("/resources/css/Footer.css");
    int _jspx_eval_c_005furl_005f3 = _jspx_th_c_005furl_005f3.doStartTag();
    if (_jspx_th_c_005furl_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f3);
    return false;
  }
}
