package com.ict.project.controller;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.ict.project.service.PersonnelService;

// 작성자: 김재겸

@Controller
public class PersonnelController {

    @Autowired
    private PersonnelService personnelservice;

    /*
      기능
      1. 출퇴근 도장 기능
      2. 오늘의 할일 달력(TO DO 달력) 기능
      3. 근무 방식 및 희망 근무지 기능
      4. 내 월급 리스트 확인 기능
      5. 휴가 신청 기능
      6. 공지사항 기능
    */

    @GetMapping("/attendance")
    public ModelAndView AttendancePageGO() {
        return new ModelAndView("MainPage/attendance");
    }

    /////////////////////////////////////////////////////////
    // 급여 컨트롤러 작성자: 정택준 
    // adminpay controller

    @PostMapping("/searchEmployees")
    public ModelAndView searchEmployees(
            @RequestParam("searchType") String searchType,
            @RequestParam("searchKeyword") String searchKeyword,
            HttpSession session) {
        ModelAndView mv = new ModelAndView("Payment/adminPay");

        Map<String, String> searchOptions = new HashMap<>();
        searchOptions.put("name", "이름");
        searchOptions.put("department", "부서");
        searchOptions.put("position", "직책");
        mv.addObject("searchOptions", searchOptions);
        mv.addObject("selectedType", searchType);
        mv.addObject("searchKeyword", searchKeyword);

        if (searchType == null || searchType.trim().isEmpty()) {
            mv.addObject("error", "검색 기준을 선택해주세요.");
            return mv;
        }
        if (searchKeyword == null || searchKeyword.trim().isEmpty()) {
            mv.addObject("error", "검색어를 입력해주세요.");
            return mv;
        }

        List<Map<String, Object>> employeeList = new ArrayList<>();
        switch (searchType) {
            case "name":
                employeeList = personnelservice.searchEmployeesByName(searchKeyword);
                break;
            case "department":
                employeeList = personnelservice.searchEmployeesByDepartment(searchKeyword);
                break;
            case "position":
                employeeList = personnelservice.searchEmployeesByPosition(searchKeyword);
                break;
            default:
                mv.addObject("error", "잘못된 검색 기준입니다.");
                return mv;
        }

        mv.addObject("employeeList", employeeList);
        System.out.println("Employee List: " + employeeList);
        return mv;
    }

    @GetMapping("/payrollGrade")
    public ModelAndView getPayrollGrade(HttpSession session) {
        return new ModelAndView("Payment/adminPay");
    }

    // admin detailpay controller

    @GetMapping("/pay_detail")
    public ModelAndView getPayUpdate(@RequestParam("emp_idx") String emp_idx, HttpSession session) {
        ModelAndView mv = new ModelAndView("Payment/adminPayDetailUpdate");

        if (!"ok".equals(session.getAttribute("admin"))) {
            System.out.println("Admin session invalid for emp_idx: " + emp_idx);
            mv.setViewName("redirect:/index");
            mv.addObject("error", "관리자 권한이 필요합니다.");
            return mv;
        }

        Map<String, Object> paydetail = personnelservice.searchPayDetail(emp_idx);
        if (paydetail == null) {
            System.out.println("No pay details found for emp_idx: " + emp_idx);
            mv.setViewName("redirect:/payrollGrade");
            mv.addObject("error", "직원 정보를 찾을 수 없습니다.");
            return mv;
        }

        convertGender(paydetail);
        mv.addObject("user", paydetail);
        return mv;
    }

    @GetMapping("/pay_insert")
    public ModelAndView getPayInsert(@RequestParam("emp_idx") String emp_idx, HttpSession session) {
        ModelAndView mv = new ModelAndView("Payment/adminPayDetailInsert");

        if (!"ok".equals(session.getAttribute("admin"))) {
            mv.setViewName("redirect:/index");
            mv.addObject("error", "관리자 권한이 필요합니다.");
            return mv;
        }

        Map<String, Object> paydetail = personnelservice.searchPayDetail(emp_idx);
        if (paydetail == null) {
            mv.setViewName("redirect:/payrollGrade");
            mv.addObject("error", "직원 정보를 찾을 수 없습니다.");
            return mv;
        }

        convertGender(paydetail);
        mv.addObject("user", paydetail);
        return mv;
    }

    @PostMapping("/admin_Pay_Update_Ok")
    public ModelAndView adminPayDetailUpdateOk(@RequestParam("emp_idx") String emp_idx,
                                              @RequestParam("base_salary") double base_salary,
                                              @RequestParam("bonus") double bonus,
                                              @RequestParam("payment_date") String payment_date,
                                              @RequestParam(value = "taxRate", defaultValue = "0") double taxRate,
                                              HttpSession session) {
        ModelAndView mv = new ModelAndView("redirect:/payrollGrade");

        if (!"ok".equals(session.getAttribute("admin"))) {
            mv.addObject("error", "관리자 권한이 필요합니다.");
            return mv;
        }

        try {
            java.sql.Date sqlDate = parseDate(payment_date);
            Map<String, Object> params = new HashMap<>();
            params.put("emp_idx", emp_idx);
            params.put("base_salary", base_salary);
            params.put("bonus", bonus);
            params.put("payment_date", sqlDate);

            int result = personnelservice.updatePay(params);
            if (result > 0) {
                personnelservice.updateEmployeePay(Map.of("emp_idx", emp_idx, "pay", base_salary));
                personnelservice.insertRequestLog(Map.of(
                        "request_idx", personnelservice.getLastRequestIdx(emp_idx),
                        "logging_salary", "UPDATE",
                        "logging_date", new java.sql.Timestamp(System.currentTimeMillis())
                ));
                mv.addObject("message", "급여 정보가 성공적으로 수정되었습니다.");
            } else {
                mv.addObject("error", "급여 정보 수정에 실패했습니다.");
            }
        } catch (Exception e) {
            mv.addObject("error", "입력값 오류: " + e.getMessage());
        }

        return mv;
    }

    @PostMapping("/admin_Pay_Insert_Ok")
    public ModelAndView insertPay(@RequestParam("emp_idx") String emp_idx,
                                 @RequestParam("base_salary") double base_salary,
                                 @RequestParam("bonus") double bonus,
                                 @RequestParam("payment_date") String payment_date,
                                 @RequestParam(value = "taxRate", defaultValue = "0") double taxRate,
                                 HttpSession session) {
        ModelAndView mv = new ModelAndView("redirect:/payrollGrade");

        if (!"ok".equals(session.getAttribute("admin"))) {
            mv.addObject("error", "관리자 권한이 필요합니다.");
            return mv;
        }

        try {
            java.sql.Date sqlDate = parseDate(payment_date);
            if (base_salary <= 0) {
                mv.addObject("error", "기본급은 0보다 커야 합니다.");
                return mv;
            }

            if (personnelservice.isPayRecordExists(emp_idx, sqlDate)) {
                mv.addObject("error", "이미 해당 날짜에 급여 기록이 있습니다.");
                return mv;
            }

            Map<String, Object> params = Map.of(
                    "emp_idx", emp_idx,
                    "base_salary", base_salary,
                    "bonus", bonus,
                    "payment_date", sqlDate
            );

            int result = personnelservice.insertPay(params);
            if (result > 0) {
                personnelservice.updateEmployeePay(Map.of("emp_idx", emp_idx, "pay", base_salary));
                personnelservice.insertRequestLog(Map.of(
                        "request_idx", personnelservice.getLastRequestIdx(emp_idx),
                        "logging_salary", "INSERT",
                        "logging_date", new java.sql.Timestamp(System.currentTimeMillis())
                ));
                mv.addObject("message", "급여가 성공적으로 지급되었습니다.");
            } else {
                mv.addObject("error", "급여 지급에 실패했습니다.");
            }
        } catch (Exception e) {
            mv.addObject("error", "입력값 오류: " + e.getMessage());
        }

        return mv;
    }

    @GetMapping("/payrollList")
    public ModelAndView getPayrollList(HttpSession session) {
        String emp_idx = (String) session.getAttribute("emp_idx");
        return new ModelAndView("Payment/pay", "emp_idx", emp_idx);
    }

    @GetMapping("/PayrollManagement")
    public ModelAndView getPayrollManagement(HttpSession session) {
        String emp_idx = (String) session.getAttribute("emp_idx");
        return new ModelAndView("/Payment/pay", "emp_idx", emp_idx);
    }

    @GetMapping("/paylist")
    public ModelAndView getPayList(@RequestParam("emp_idx") String emp_idx,
                                   @RequestParam("payment_date") String payment_date,
                                   @RequestParam(value = "taxRate", defaultValue = "0") double taxRate) {
        ModelAndView mv = new ModelAndView("Payment/pay");
        Map<String, Object> params = Map.of("emp_idx", emp_idx, "payment_date", payment_date);

        List<Map<String, Object>> paylist = personnelservice.searchPayList(params);
        for (Map<String, Object> pay : paylist) {
            double baseSalary = ((Number) pay.get("base_salary")).doubleValue();
            double bonus = ((Number) pay.get("bonus")).doubleValue();
            double taxAmount = baseSalary * taxRate / 100;
            double realPay = baseSalary - taxAmount + bonus;
            pay.put("tax_rate", taxRate);
            pay.put("real_pay", realPay);
        }

        mv.addObject("paylist", paylist);
        mv.addObject("taxRate", taxRate);
        return mv;
    }

    private void convertGender(Map<String, Object> data) {
        if (data.containsKey("gender")) {
            String gender = String.valueOf(data.get("gender"));
            if ("0".equals(gender)) data.put("gender", "여자");
            else if ("1".equals(gender)) data.put("gender", "남자");
        } else {
            data.put("gender", null);
        }
    }

    private java.sql.Date parseDate(String date) throws Exception {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        sdf.setLenient(false);
        java.util.Date utilDate = sdf.parse(date);
        return new java.sql.Date(utilDate.getTime());
    }
}
