	package com.ict.project.controller;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.ict.project.common.QnaPaeging;
import com.ict.project.service.QnaService;
import com.ict.project.vo.personnel.pFile.QuestionVO;

@Controller
public class QnaController {

		@Autowired
		private QnaService qnaService;
		
		@Autowired
		private QnaPaeging paging;
	
		@GetMapping("/qna")
		public ModelAndView getQna(HttpSession session) {
		    String empIdx = (String) session.getAttribute("emp_idx");
		    String deptName = (String) session.getAttribute("dept_name");
		    
		    int total = qnaService.getTotalCount(deptName, empIdx); // üî• Ï¥ù Í≤åÏãúÎ¨º Ïàò
		    paging.setTotalRecord(total);
		    paging.setNowPage(nowPage);

		    int offset = (nowPage - 1) * paging.getNumPerPage();
		    paging.setOffset(offset);
		    
		    ModelAndView mv = new ModelAndView();
		    List<Map<String, Object>> qnaList;

		    if ("Í¥ÄÎ¶¨Ïûê".equals(deptName) || "ÏäàÌçºÍ¥ÄÎ¶¨Ïûê".equals(deptName)) {
		        qnaList = qnaService.getAllQna(); 
		    } else {
		        qnaList = qnaService.getQnaByEmpIdx(empIdx); 
		    }

		    mv.addObject("qnaList", qnaList);
		    mv.setViewName("QnA/Qna");
		    return mv;
		}
	
    @GetMapping("/qnaWrite")
    public ModelAndView getQnaWrite() {
    	return new ModelAndView("QnA/qnaWrite");
    }
    
    @PostMapping("/qnaWriteOk")
    public ModelAndView postQnaWrite(@RequestParam Map<String, Object> param, HttpSession session) {
        String emp_idx = (String) session.getAttribute("emp_idx");

        Map<String, Object> user = qnaService.getUserInfoByEmpIdx(emp_idx);
        param.put("emp_idx", emp_idx);
        param.put("emp_name", user.get("emp_name"));
        
        qnaService.insertQna(param);

        
        ModelAndView mv = new ModelAndView("QnA/qnaWrite");
        mv.addObject("writeComplete", true); 
        return mv;
    }
    
    @GetMapping("/qnaDetail")
    public ModelAndView getQnaDetail(@RequestParam("answer_id") String answer_id) {
    	QuestionVO qna = qnaService.getQnaDetail(answer_id); // 

        ModelAndView mv = new ModelAndView("QnA/qnaDetail");
        mv.addObject("qna", qna);
        return mv;
    }
    
    @PostMapping("/qnaUpdate")
    public ModelAndView getQnaUdate(QuestionVO qnavo) {
    	
    	ModelAndView mv = new ModelAndView();
    	
    	qnaService.updateQna(qnavo);
  
    	
    	mv.setViewName("redirect:/qna");
    	return mv;
    }
    
    
    @GetMapping("/qnaDelete")
    public ModelAndView getdeleteQna(QuestionVO qnavo){
    	ModelAndView mv = new ModelAndView();
    	qnaService.deleteQna(qnavo);
    	
    	mv.setViewName("redirect:/qna");
    	return mv;
    }
    
    
    
}
