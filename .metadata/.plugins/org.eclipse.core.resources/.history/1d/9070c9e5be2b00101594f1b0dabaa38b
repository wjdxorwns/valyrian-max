

package com.ict.project.controller;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.ict.project.service.NorService;
import com.ict.project.vo.personnel.UsersVO;
import com.ict.project.vo.personnel.EmployeeVO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Controller
public class NorLoginAndRegisterController {

    private static final Logger logger = LoggerFactory.getLogger(NorLoginAndRegisterController.class);

    @Autowired
    private NorService norService;

    @Autowired
    private BCryptPasswordEncoder passwordEncoder;

    // 로그인 페이지로 이동
    @GetMapping("/login")
    public ModelAndView loginPageGo() {
        return new ModelAndView("MainPage/login");
    }

    // 로그인 처리 (일반 사용자, 관리자, 슈퍼관리자 포함)
    @PostMapping("/login")
    public ModelAndView login(@RequestParam String emp_email, @RequestParam String emp_password, HttpSession session) {
        ModelAndView mv = new ModelAndView();

        try {
            // 사용자가 입력한 이메일로 사용자 정보 조회
            UsersVO user = norService.getUserByEmail(emp_email);
            
            if (user == null) {
                mv.addObject("loginchk", "fail"); // 사용자 미존재
                mv.setViewName("MainPage/login");
                return mv;
            }

            // 입력한 비밀번호가 저장된 비밀번호와 일치하는지 확인
            if (!passwordEncoder.matches(emp_password, user.getEmp_password())) {
                mv.addObject("loginchk", "fail"); // 비밀번호 불일치
                mv.setViewName("MainPage/login");
                return mv;
            }

            // UsersVO에서 user_idx를 가져와서 EmployeeVO 정보 조회
            int user_idx = user.getUser_idx();  // UsersVO에서 user_idx 가져오기
            EmployeeVO employee = norService.getEmployeeByUserIdx(user_idx); // user_idx로 EmployeeVO 가져오기

            if (employee == null) {
                mv.addObject("loginchk", "fail"); // 직원 정보 미존재
                mv.setViewName("MainPage/login");
                return mv;
            }

            // 로그인 성공 처리 - 세션에 로그인 정보 저장
            session.setAttribute("loginchk", "ok");
            session.setAttribute("userVO", user); 
            session.setAttribute("emp_email", user.getEmp_email());


            // 부서 정보 설정
            String deptName = employee.getDept_name();  // EmployeeVO에서 dept_name 가져오기
            session.setAttribute("role", deptName);
            

            // 관리자 및 슈퍼관리자 구분
            if ("슈퍼관리자".equals(deptName) || "관리자".equals(deptName)) {
                session.setAttribute("admin", "ok");
            } else {
                session.setAttribute("admin", "no");
            }
    
            // 메인 페이지로 리다이렉트
            mv.setViewName("redirect:/index");
            System.out.println(session);
        } catch (Exception e) {
            logger.error("Login error for user {}: ", emp_email, e);  // 로깅을 통한 오류 기록
            mv.addObject("error", "로그인 중 오류가 발생했습니다. 다시 시도해주세요.");
            mv.setViewName("MainPage/login");
        }

        return mv;
    }
    
    // 로그아웃 처리
    @GetMapping("/logout")
    public ModelAndView logout(HttpSession session) {
        session.invalidate(); // 세션 무효화
        return new ModelAndView("redirect:/login"); // 로그인 페이지로 리디렉션
    }

    // index 페이지로 이동
    @GetMapping("/index")
    public ModelAndView goToIndex() {
        return new ModelAndView("MainPage/index");
    }
}
