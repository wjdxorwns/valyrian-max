<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="personnel">
    <select id="findByEmpNameContaining" resultType="java.util.Map">
        SELECT e.emp_idx, u.emp_name, e.pay_grade, e.position, e.dept_name, e.hire_date, e.employment_type, e.pay, s.bonus
        FROM employee e
        INNER JOIN users u ON e.user_idx = u.user_idx
        LEFT JOIN (
            SELECT s1.*, r2.emp_idx
            FROM salary s1
            INNER JOIN (
                SELECT r.emp_idx, MAX(s.payment_date) AS max_date
                FROM salary s
                INNER JOIN request r ON s.request_idx = r.request_idx
                GROUP BY r.emp_idx
            ) latest ON s1.payment_date = latest.max_date
            INNER JOIN request r2 ON s1.request_idx = r2.request_idx AND r2.emp_idx = latest.emp_idx
        ) s ON e.emp_idx = s.emp_idx
        WHERE u.emp_name LIKE CONCAT('%', #{keyword}, '%')
    </select>

    <select id="findByDeptNameContaining" resultType="java.util.Map">
        SELECT e.emp_idx, u.emp_name, e.pay_grade, e.position, e.dept_name, e.hire_date, e.employment_type, e.pay, s.bonus
        FROM employee e
        INNER JOIN users u ON e.user_idx = u.user_idx
        LEFT JOIN (
            SELECT s1.*, r2.emp_idx
            FROM salary s1
            INNER JOIN (
                SELECT r.emp_idx, MAX(s.payment_date) AS max_date
                FROM salary s
                INNER JOIN request r ON s.request_idx = r.request_idx
                GROUP BY r.emp_idx
            ) latest ON s1.payment_date = latest.max_date
            INNER JOIN request r2 ON s1.request_idx = r2.request_idx AND r2.emp_idx = latest.emp_idx
        ) s ON e.emp_idx = s.emp_idx
        WHERE e.dept_name LIKE CONCAT('%', #{keyword}, '%')
    </select>

    <select id="findByPositionContaining" resultType="java.util.Map">
        SELECT e.emp_idx, u.emp_name, e.pay_grade, e.position, e.dept_name, e.hire_date, e.employment_type, e.pay, s.bonus
        FROM employee e
        INNER JOIN users u ON e.user_idx = u.user_idx
        LEFT JOIN (
            SELECT s1.*, r2.emp_idx
            FROM salary s1
            INNER JOIN (
                SELECT r.emp_idx, MAX(s.payment_date) AS max_date
                FROM salary s
                INNER JOIN request r ON s.request_idx = r.request_idx
                GROUP BY r.emp_idx
            ) latest ON s1.payment_date = latest.max_date
            INNER JOIN request r2 ON s1.request_idx = r2.request_idx AND r2.emp_idx = latest.emp_idx
        ) s ON e.emp_idx = s.emp_idx
        WHERE e.position LIKE CONCAT('%', #{keyword}, '%')
    </select>

    <select id="payDetail" parameterType="String" resultType="java.util.Map">
        SELECT u.emp_name, u.emp_email, u.phone_number, e.team, e.position, e.pay_grade, e.hire_date,
               u.gender, e.emp_idx, e.pay, u.home, u.detail_home
        FROM employee e
        INNER JOIN users u ON e.user_idx = u.user_idx
        WHERE e.emp_idx = #{emp_idx}
    </select>

    <select id="payList" parameterType="map" resultType="java.util.Map">
        SELECT e.emp_idx, u.emp_name, s.payment_date, e.pay_grade, e.team, e.position,
               e.employment_type, s.base_salary, s.bonus
        FROM employee e
        INNER JOIN users u ON e.user_idx = u.user_idx
        LEFT JOIN request r ON e.emp_idx = r.emp_idx
        LEFT JOIN salary s ON r.request_idx = s.request_idx
        WHERE s.payment_date = #{payment_date} AND e.emp_idx = #{emp_idx}
    </select>

    <insert id="payInsert" parameterType="map">
        INSERT INTO request (emp_idx, request_salary)
        VALUES (#{emp_idx}, 1);
        INSERT INTO salary (request_idx, base_salary, bonus, payment_date)
        VALUES (LAST_INSERT_ID(), #{base_salary}, #{bonus}, #{payment_date});
    </insert>

    <update id="updatePay" parameterType="map">
        UPDATE salary s
        INNER JOIN request r ON s.request_idx = r.request_idx
        SET s.base_salary = #{base_salary}, s.bonus = #{bonus}, s.payment_date = #{payment_date}
        WHERE r.emp_idx = #{emp_idx} AND s.payment_date = #{payment_date}
    </update>

    <select id="checkPayRecord" parameterType="map" resultType="java.util.Map">
        SELECT salary_id
        FROM salary s
        INNER JOIN request r ON s.request_idx = r.request_idx
        WHERE r.emp_idx = #{emp_idx} AND s.payment_date = #{payment_date}
    </select>

    <update id="updateEmployeePay" parameterType="map">
        UPDATE employee
        SET pay = #{pay}
        WHERE emp_idx = #{emp_idx}
    </update>

    <insert id="insertRequestLog" parameterType="map">
        INSERT INTO requestlogging (request_idx, logging_salary, logging_date)
        VALUES (#{request_idx}, #{logging_salary}, #{logging_date})
    </insert>

    <select id="getLastRequestIdx" parameterType="String" resultType="int">
        SELECT request_idx
        FROM request
        WHERE emp_idx = #{emp_idx}
        ORDER BY request_idx DESC
        LIMIT 1
    </select>
</mapper>
