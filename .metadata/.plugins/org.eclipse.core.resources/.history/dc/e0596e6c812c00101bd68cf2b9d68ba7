package com.ict.project.controller;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.ict.project.service.PersonnelService;

// 작성자: 김재겸

@Controller
public class PersonnelController {

    @Autowired
    private PersonnelService personnelservice;

    /*
      기능
      1. 출퇴근 도장 기능
      2. 오늘의 할일 달력(TO DO 달력) 기능
      3. 근무 방식 및 희망 근무지 기능
      4. 내 월급 리스트 확인 기능
      5. 휴가 신청 기능
      6. 공지사항 기능
    */

    @GetMapping("/attendance")
    public ModelAndView AttendancePageGO() {
        return new ModelAndView("MainPage/attendance");
    }

    /////////////////////////////////////////////////////////
    // 급여 컨트롤러 작정자: 정택준 
    // adminpay controller

    @PostMapping("/searchEmployees")
    public ModelAndView searchEmployees(
            @RequestParam("searchType") String searchType,
            @RequestParam("searchKeyword") String searchKeyword,
            HttpSession session) {
        ModelAndView mv = new ModelAndView("Payment/adminPay");

        Map<String, String> searchOptions = new HashMap<>();
        searchOptions.put("name", "이름");
        searchOptions.put("department", "부서");
        searchOptions.put("position", "직책");
        mv.addObject("searchOptions", searchOptions);
        mv.addObject("selectedType", searchType);
        mv.addObject("searchKeyword", searchKeyword);

        if (searchType == null || searchType.trim().isEmpty()) {
            mv.addObject("error", "검색 기준을 선택해주세요.");
            return mv;
        }
        if (searchKeyword == null || searchKeyword.trim().isEmpty()) {
            mv.addObject("error", "검색어를 입력해주세요.");
            return mv;
        }

        List<Map<String, Object>> employeeList = new ArrayList<>();
        if ("name".equals(searchType)) {
            employeeList = personnelservice.searchEmployeesByName(searchKeyword);
        } else if ("department".equals(searchType)) {
            employeeList = personnelservice.searchEmployeesByDepartment(searchKeyword);
        } else if ("position".equals(searchType)) {
            employeeList = personnelservice.searchEmployeesByPosition(searchKeyword);
        } else {
            mv.addObject("error", "잘못된 검색 기준입니다.");
            return mv;
        }

        mv.addObject("employeeList", employeeList);
        System.out.println("Employee List: " + employeeList);
        return mv;
    }

    @GetMapping("/payrollGrade")
    public ModelAndView getPayrollGrade(HttpSession session) {
        ModelAndView mv = new ModelAndView();
        mv.setViewName("Payment/adminPay");
        return mv;
    }

    // admin detailpay controller

    @GetMapping("/pay_detail")
    public ModelAndView getPayUpdate(@RequestParam("emp_idx") String emp_idx, HttpSession session) {
        ModelAndView mv = new ModelAndView("Payment/adminPayDetailUpdate");

        if (!"ok".equals(session.getAttribute("admin"))) {
            mv.setViewName("redirect:/index");
            mv.addObject("error", "관리자 권한이 필요합니다.");
            return mv;
        }

        Map<String, Object> paydetail = personnelservice.serchpaydetail(emp_idx);

        if (paydetail != null && paydetail.containsKey("gender")) {
            String gender = paydetail.get("gender").toString();
            switch (gender) {
                case "0": paydetail.put("gender", "여자"); break;
                case "1": paydetail.put("gender", "남자"); break;
            }
        } else {
            paydetail.put("gender", null);
        }

        mv.addObject("user", paydetail);
        return mv;
    }

    @GetMapping("/pay_insert")
    public ModelAndView getPayInsert(@RequestParam("emp_idx") String emp_idx, HttpSession session) {
        ModelAndView mv = new ModelAndView("Payment/adminPayDetailInsert");

        if (!"ok".equals(session.getAttribute("admin"))) {
            mv.setViewName("redirect:/index");
            mv.addObject("error", "관리자 권한이 필요합니다.");
            return mv;
        }

        Map<String, Object> paydetail = personnelservice.serchpaydetail(emp_idx);

        if (paydetail != null && paydetail.containsKey("gender")) {
            String gender = paydetail.get("gender").toString();
            switch (gender) {
                case "0": paydetail.put("gender", "여자"); break;
                case "1": paydetail.put("gender", "남자"); break;
            }
        } else {
            paydetail.put("gender", null);
        }

        mv.addObject("user", paydetail);
        return mv;
    }

    @PostMapping("/admin_Pay_update_Ok")
    public ModelAndView adminPayDetailUpdateOk(@RequestParam("emp_idx") String emp_idx,
                                              @RequestParam("base_salary") String base_salary,
                                              @RequestParam("bonus") String bonus,
                                              @RequestParam("payment_date") String payment_date,
                                              @RequestParam(value = "taxRate", defaultValue = "0") String taxRate,
                                              HttpSession session) {
        ModelAndView mv = new ModelAndView("redirect:/payrollGrade");

        if (!"ok".equals(session.getAttribute("admin"))) {
            mv.addObject("error", "관리자 권한이 필요합니다.");
            return mv;
        }

        // 입력값 검증
        double baseSalary;
        double bonusValue;
        double taxRateValue;
        java.sql.Date sqlDate;
        try {
            baseSalary = Double.parseDouble(base_salary);
            bonusValue = Double.parseDouble(bonus);
            taxRateValue = Double.parseDouble(taxRate) / 100;
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.setLenient(false);
            java.util.Date utilDate = sdf.parse(payment_date);
            sqlDate = new java.sql.Date(utilDate.getTime());
        } catch (NumberFormatException e) {
            mv.addObject("error", "기본급, 보너스 또는 세율을 숫자로 입력해주세요.");
            return mv;
        } catch (Exception e) {
            mv.addObject("error", "지급일 형식이 잘못되었습니다. (YYYY-MM-DD)");
            return mv;
        }

        // 세금 계산
        double taxAmount = baseSalary * taxRateValue;
        double realPay = baseSalary - taxAmount + bonusValue;

        Map<String, Object> params = new HashMap<>();
        params.put("emp_idx", emp_idx);
        params.put("base_salary", baseSalary);
        params.put("bonus", bonusValue);
        params.put("payment_date", sqlDate);
        params.put("tax_rate", taxRateValue);
        params.put("real_pay", realPay);

        int result = personnelservice.updatePay(params);
        if (result > 0) {
            // Employee.pay 업데이트
            Map<String, Object> employeeParams = new HashMap<>();
            employeeParams.put("emp_idx", emp_idx);
            employeeParams.put("pay", baseSalary);
            personnelservice.updateEmployeePay(employeeParams);

            // 로그 기록
            Map<String, Object> logParams = new HashMap<>();
            logParams.put("request_idx", personnelservice.getLastRequestIdx(emp_idx));
            logParams.put("logging_salary", "UPDATE");
            logParams.put("logging_date", new java.sql.Timestamp(System.currentTimeMillis()));
            personnelservice.insertRequestLog(logParams);

            mv.addObject("message", "급여 정보가 성공적으로 수정되었습니다.");
        } else {
            mv.addObject("error", "급여 정보 수정에 실패했습니다.");
        }

        return mv;
    }

    @PostMapping("/admin_Pay_Insert_Ok")
    public ModelAndView insertPay(@RequestParam("emp_idx") String emp_idx,
                                 @RequestParam("base_salary") String base_salary,
                                 @RequestParam("bonus") String bonus,
                                 @RequestParam("payment_date") String payment_date,
                                 @RequestParam(value = "taxRate", defaultValue = "0") String taxRate,
                                 HttpSession session) {
        ModelAndView mv = new ModelAndView("redirect:/payrollGrade");

        if (!"ok".equals(session.getAttribute("admin"))) {
            mv.addObject("error", "관리자 권한이 필요합니다.");
            return mv;
        }

        // 입력값 검증
        double baseSalary;
        double bonusValue;
        double taxRateValue;
        java.sql.Date sqlDate;
        try {
            baseSalary = Double.parseDouble(base_salary);
            bonusValue = Double.parseDouble(bonus);
            taxRateValue = Double.parseDouble(taxRate) / 100;
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.setLenient(false);
            java.util.Date utilDate = sdf.parse(payment_date);
            sqlDate = new java.sql.Date(utilDate.getTime());
        } catch (NumberFormatException e) {
            mv.addObject("error", "기본급, 보너스 또는 세율을 숫자로 입력해주세요.");
            return mv;
        } catch (Exception e) {
            mv.addObject("error", "지급일 형식이 잘못되었습니다. (YYYY-MM-DD)");
            return mv;
        }

        if (baseSalary <= 0) {
            mv.addObject("error", "기본급은 0보다 커야 합니다.");
            return mv;
        }

        // 중복 급여 기록 체크
        if (personnelservice.isPayRecordExists(emp_idx, sqlDate)) {
            mv.addObject("error", "이미 해당 날짜에 급여 기록이 있습니다.");
            return mv;
        }

        // 세금 계산
        double taxAmount = baseSalary * taxRateValue;
        double realPay = baseSalary - taxAmount + bonusValue;

        Map<String, Object> params = new HashMap<>();
        params.put("emp_idx", emp_idx);
        params.put("base_salary", baseSalary);
        params.put("bonus", bonusValue);
        params.put("payment_date", sqlDate);
        params.put("tax_rate", taxRateValue);
        params.put("real_pay", realPay);

        int result = personnelservice.insertPay(params);
        if (result > 0) {
            // Employee.pay 업데이트
            Map<String, Object> employeeParams = new HashMap<>();
            employeeParams.put("emp_idx", emp_idx);
            employeeParams.put("pay", baseSalary);
            personnelservice.updateEmployeePay(employeeParams);

            // 로그 기록
            Map<String, Object> logParams = new HashMap<>();
            logParams.put("request_idx", personnelservice.getLastRequestIdx(emp_idx));
            logParams.put("logging_salary", "INSERT");
            logParams.put("logging_date", new java.sql.Timestamp(System.currentTimeMillis()));
            personnelservice.insertRequestLog(logParams);

            mv.addObject("message", "급여가 성공적으로 지급되었습니다.");
        } else {
            mv.addObject("error", "급여 지급에 실패했습니다.");
        }

        return mv;
    }

    @GetMapping("/payrollList")
    public ModelAndView getPayrollList(HttpSession session) {
        ModelAndView mv = new ModelAndView();
        String emp_idx = (String) session.getAttribute("emp_idx");
        mv.addObject("emp_idx", emp_idx);
        mv.setViewName("Payment/pay");
        return mv;
    }

    @GetMapping("/PayrollManagement")
    public ModelAndView getPayrollManagement(HttpSession session) {
        ModelAndView mv = new ModelAndView();
        String emp_idx = (String) session.getAttribute("emp_idx");
        mv.addObject("emp_idx", emp_idx);
        mv.setViewName("/Payment/pay");
        return mv;
    }

    @GetMapping("/paylist")
    public ModelAndView getPayList(@RequestParam("emp_idx") String emp_idx,
                                   @RequestParam("payment_date") String payment_date) {
        ModelAndView mv = new ModelAndView("Payment/pay");
        System.out.println(emp_idx);
        System.out.println(payment_date);
        Map<String, Object> params = new HashMap<>();
        params.put("emp_idx", emp_idx);
        params.put("payment_date", payment_date);

        List<Map<String, Object>> paylist = personnelservice.serchpaylist(params);
        System.out.println(paylist);
        mv.addObject("paylist", paylist);
        return mv;
    }
}