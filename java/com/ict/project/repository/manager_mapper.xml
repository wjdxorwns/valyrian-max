<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="manager">
	<insert id="insertUser"
		parameterType="com.ict.project.vo.personnel.UsersVO"
		useGeneratedKeys="true"
        keyProperty="user_idx">
		INSERT INTO users (emp_email, emp_name, emp_password, home, detail_home,
		phone_number, gender, birthday)
		VALUES (#{emp_email}, #{emp_name}, #{emp_password}, #{home}, #{detail_home},
		#{phone_number}, #{gender}, #{birthday})
	</insert>

	<select id="checkEmpIdxDuplicate" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM employee WHERE emp_idx = #{empIdx}
	</select>

	<insert id="insertEmployee"
		parameterType="com.ict.project.vo.personnel.EmployeeVO">
		INSERT INTO employee (user_idx,emp_idx,emp_id,position,pay_grade,hire_date,team,location,attitude_type,employment_type)
		VALUES (#{user_idx},#{emp_idx},#{emp_id},#{position},#{pay_grade},#{hire_date},#{team},#{location},#{attitude_type},#{employment_type})
	</insert>

	<insert id="insertEmpPicture"
		parameterType="com.ict.project.vo.personnel.pFile.EmpPictureVO">
		INSERT INTO emppicture (emp_idx, f_name, f_path, f_width, f_height)
		VALUES (#{emp_idx}, #{f_name}, #{f_path}, #{f_width}, #{f_height})
	</insert>
	
	<select id="getAllEmployees" parameterType="Map" resultType="java.util.Map">
		SELECT
			e.emp_id,
			u.emp_name,
			e.team,
			e.position,
			u.emp_email,
			u.birthday,
			u.gender,
			u.phone_number,
			u.home,
			u.detail_home,
			e.hire_date,
			e.location,
			e.pay_grade,
			e.employment_type,
			e.attitude_type,
			e.dept_name,
			e.quitter,
			e.resignation_date,
			u.remove
		FROM
			users u
		JOIN
			employee e ON u.user_idx = e.user_idx
		<where>
            <if test="searchType != null and keyword != null and keyword != ''">
                <choose>
                    <when test="searchType == 'emp_name'">
                        u.emp_name LIKE CONCAT('%', #{keyword}, '%')
                    </when>
                    <when test="searchType == 'emp_id'">
                        e.emp_id LIKE CONCAT('%', #{keyword}, '%')
                    </when>
                    <when test="searchType == 'dept_name'">
                        e.dept_name LIKE CONCAT('%', #{keyword}, '%')
                    </when>
                    <when test="searchType == 'position'">
                        e.position LIKE CONCAT('%', #{keyword}, '%')
                    </when>
                </choose>
            </if>
		</where>
		ORDER BY e.emp_id AND u.remove = 0
	</select>

	<select id="checkEmailDuplicate" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM users WHERE emp_email = #{email}
	</select>

	<select id="checkEmpIdDuplicate" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM employee WHERE emp_id = #{empId}
	</select>

    <select id="checkPhoneNumberDuplicate" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM users WHERE phone_number = #{phoneNumber}
    </select>
    
   <select id="list" resultType="map">
        SELECT
        p.emp_idx,
        u.emp_name,
        e.dept_name,
        p.can_access_employee,
        p.can_access_worktype,
        p.can_access_personnel,
        p.can_access_salary,
        p.can_access_vacation
        FROM Permission p
        INNER JOIN Employee e ON p.emp_idx = e.emp_idx
        INNER JOIN Users u ON e.user_idx = u.user_idx
        WHERE e.dept_name = '관리자'
    </select>

    <update id="updatePermissions" parameterType="map">
        UPDATE Permission
        SET can_access_employee = #{permissions.can_access_employee},
            can_access_worktype = #{permissions.can_access_worktype},
            can_access_personnel = #{permissions.can_access_personnel},
            can_access_salary = #{permissions.can_access_salary},
            can_access_vacation = #{permissions.can_access_vacation}
        WHERE emp_idx = #{userId}
    </update>

    
    <select id="resignList" resultType="Map">
select * 
from Employee e
join users u on u.user_idx= e.user_idx
where u.remove = 0;
</select>

<select id="keyword" parameterType="map" resultType="map">
    SELECT *
    FROM Employee e
    JOIN users u ON u.user_idx = e.user_idx
    WHERE
   <choose>
    <when test="searchType == 'emp_id'">
        e.emp_id LIKE #{keyword} AND u.remove = 0
    </when>
    <when test="searchType == 'emp_name'">
        u.emp_name LIKE #{keyword} AND u.remove = 0
    </when>
    <when test="searchType == 'team'">
        e.team LIKE #{keyword} AND u.remove = 0
    </when>
    <when test="searchType == 'position'">
        e.position LIKE #{keyword} AND u.remove = 0
    </when>
    <when test="searchType == 'quitter'">
        e.quitter = #{keyword}
    </when>
    <otherwise>
        1=1
    </otherwise>
</choose>
</select>

<update id="update" parameterType="map">
 UPDATE Employee
 SET quitter = #{quitter}
 <if test="quitter == '퇴사'">
        , resignation_date = NOW()
    </if>
 WHERE emp_id = #{emp_id}
</update>

<update id="updateUserRemove" parameterType="map">
    UPDATE users
    SET remove = 
        <choose>
            <when test="quitter == '퇴사'">1</when>
            <otherwise>0</otherwise>
        </choose>
    WHERE user_idx = (SELECT user_idx FROM Employee WHERE emp_id = #{emp_id})
</update>
    
    
</mapper>