<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="personnel">
	<select id="getAllVacations" resultType="java.util.HashMap">
		SELECT
		v.vacation_id,
		e.position,
		u.emp_name,
		DATE_FORMAT(v.start_date, '%Y-%m-%d') AS start_date,
		DATE_FORMAT(v.end_date, '%Y-%m-%d') AS end_date,
		v.vacation_type,
		v.status,
		v.comment
		FROM
		Vacation v
		INNER JOIN Request r ON v.request_idx = r.request_idx
		INNER JOIN Employee e ON r.emp_idx = e.emp_idx
		INNER JOIN Users u ON e.user_idx = u.user_idx
		WHERE
		u.remove = 0
		ORDER BY
		v.start_date DESC
	</select>

	<select id="getAllApprovals" resultType="java.util.HashMap">
		SELECT
		v.vacation_id,
		v.request_idx,
		e.team,
		e.position,
		u.emp_name,
		e.emp_idx,
		DATE_FORMAT(v.start_date, '%Y-%m-%d') AS start_date,
		DATE_FORMAT(v.end_date, '%Y-%m-%d') AS end_date,
		v.vacation_type,
		v.status,
		v.comment,
		p.f_path AS photo_path
		FROM
		Vacation v
		INNER JOIN
		Request r ON v.request_idx = r.request_idx
		INNER JOIN Employee e ON
		r.emp_idx = e.emp_idx
		INNER JOIN Users u ON e.user_idx = u.user_idx
		LEFT JOIN EmpPicture p ON e.emp_idx = p.emp_idx
		WHERE
		u.remove = 0
		ORDER
		BY
		v.start_date DESC
	</select>

	<update id="updateVacationStatus" parameterType="map">
		UPDATE Vacation
		SET status = #{status}, comment = #{comment}
		WHERE vacation_id = #{vacation_id}
	</update>

	<insert id="insertVacationLogging"
		parameterType="com.ict.project.vo.management.RequestLoggingVO">
		INSERT INTO RequestLogging(
		request_idx, logging_vacation, reject, logging_date)
		VALUES(
		#{request_idx}, #{logging_vacation}, #{reject}, NOW())
	</insert>

	<select id="getAllInquiry" resultType="java.util.HashMap">
		SELECT
		e.emp_idx,
		u.emp_name,
		e.position,
		e.pay_grade,
		e.vacation_balance
		FROM
		Employee e
		INNER JOIN Users u ON e.user_idx = u.user_idx
		WHERE
		u.remove = 0
		ORDER BY
		u.emp_name
	</select>

	<select id="getUserInquiry" parameterType="int"
		resultType="java.util.HashMap">
		SELECT
		e.emp_idx,
		u.emp_name,
		e.position,
		e.vacation_balance,
		v.vacation_id,
		v.vacation_type,
		DATE_FORMAT(v.start_date, '%Y-%m-%d') AS start_date,
		DATE_FORMAT(v.end_date, '%Y-%m-%d') AS end_date,
		v.comment,
		v.status
		FROM
		Vacation v
		INNER JOIN Request r ON v.request_idx = r.request_idx
		INNER JOIN Employee e ON r.emp_idx = e.emp_idx
		INNER JOIN Users u ON e.user_idx = u.user_idx
		WHERE
		u.remove = 0
		AND u.user_idx = #{user_idx}
		ORDER BY
		v.start_date DESC
	</select>

	<select id="getUserVacationDays" parameterType="int"
		resultType="java.util.HashMap">
		SELECT
		e.emp_idx,
		u.emp_name,
		e.position,
		e.vacation_balance
		FROM
		Employee e
		INNER JOIN Users u ON e.user_idx = u.user_idx
		WHERE
		u.remove = 0
		AND u.user_idx = #{user_idx}
	</select>

	<update id="deductVacationDays" parameterType="map">
		UPDATE Employee
		SET vacation_balance = vacation_balance - (
		SELECT DATEDIFF(v.end_date, v.start_date) + 1
		FROM Vacation v
		WHERE v.vacation_id = #{vacation_id}
		AND v.status = '승인'
		)
		WHERE emp_idx = (
		SELECT r.emp_idx
		FROM Request r
		INNER JOIN Vacation v ON r.request_idx = v.request_idx
		WHERE v.vacation_id = #{vacation_id}
		)
	</update>

	<select id="findByEmpNameContaining" resultType="java.util.Map">
		SELECT
		e.emp_idx,
		u.emp_name,
		e.pay_grade,
		e.position,
		e.dept_name,
		e.hire_date,
		e.employment_type,
		e.pay,
		s.bonus,
		s.base_salary
		FROM employee e
		INNER JOIN users u ON e.user_idx = u.user_idx
		LEFT JOIN (
		SELECT * FROM salary s1
		WHERE (emp_idx, payment_date) IN (
		SELECT emp_idx, MAX(payment_date)
		FROM salary
		GROUP BY emp_idx
		)
		) s ON e.emp_idx = s.emp_idx
		WHERE u.emp_name LIKE CONCAT('%', #{keyword}, '%')
	</select>

	<select id="findByDeptNameContaining" resultType="java.util.Map">
		SELECT
		e.emp_idx,
		u.emp_name,
		e.pay_grade,
		e.position,
		e.dept_name,
		e.hire_date,
		e.employment_type,
		e.pay,
		s.bonus,
		s.base_salary
		FROM employee e
		INNER JOIN users u ON e.user_idx = u.user_idx
		LEFT JOIN (
		SELECT * FROM salary s1
		WHERE (emp_idx, payment_date) IN (
		SELECT emp_idx, MAX(payment_date)
		FROM salary
		GROUP BY emp_idx
		)
		) s ON e.emp_idx = s.emp_idx
		WHERE e.dept_name LIKE CONCAT('%', #{keyword}, '%')
	</select>


	<select id="findByPositionContaining" resultType="java.util.Map">
		SELECT
		e.emp_idx,
		u.emp_name,
		e.pay_grade,
		e.position,
		e.dept_name,
		e.hire_date,
		e.employment_type,
		e.pay,
		s.bonus,
		s.base_salary
		FROM employee e
		JOIN users u ON e.user_idx = u.user_idx
		LEFT JOIN (
		SELECT s1.emp_idx, s1.base_salary, s1.bonus
		FROM salary s1
		JOIN (
		SELECT emp_idx, MAX(payment_date) AS max_date
		FROM salary
		GROUP BY emp_idx
		) s2 ON s1.emp_idx = s2.emp_idx AND s1.payment_date = s2.max_date
		) s ON e.emp_idx = s.emp_idx
		WHERE u.emp_name LIKE CONCAT('%', #{searchKeyword}, '%')
	</select>


	<select id="paydtail" parameterType="String"
		resultType="java.util.Map">
		SELECT u.emp_name, u.emp_email, u.phone_number,
		e.team, e.position, e.pay_grade, e.hire_date,
		u.gender, e.emp_idx, e.pay,
		u.home, u.detail_home
		FROM employee e
		INNER JOIN users u ON e.user_idx = u.user_idx
		WHERE e.emp_idx = #{emp_idx}
	</select>


	<select id="payList" parameterType="map"
		resultType="java.util.Map">
		SELECT
		e.emp_idx,
		u.emp_name,
		s.payment_date,
		e.pay_grade,
		e.team,
		e.position,
		e.employment_type,
		s.base_salary,
		s.bonus
		FROM employee e
		INNER JOIN users u ON e.user_idx = u.user_idx
		LEFT JOIN salary s ON e.emp_idx = s.emp_idx
		WHERE s.payment_date LIKE CONCAT(#{payment_date},'%')
		AND e.emp_idx = #{emp_idx}
	</select>


	<insert id="payinsert" parameterType="map">
		INSERT INTO salary (emp_idx, base_salary, bonus, payment_date)
		VALUES (#{emp_idx}, #{base_salary}, #{bonus}, #{payment_date});
	</insert>


	<update id="updatePay" parameterType="map">
		UPDATE salary
		SET base_salary = #{base_salary},
		bonus = #{bonus},
		payment_date = #{payment_date}
		WHERE emp_idx = #{emp_idx}
		AND payment_date = #{payment_date};
	</update>


	<select id="checkPayRecord" parameterType="map"
		resultType="java.util.Map">
		SELECT salary_id
		FROM salary
		WHERE emp_idx = #{emp_idx}
		AND payment_date = #{payment_date}
	</select>


	<update id="updateEmployeePay" parameterType="map">
		UPDATE employee
		SET pay = (
		SELECT base_salary + bonus
		FROM salary
		WHERE emp_idx = #{emp_idx}
		ORDER BY payment_date DESC
		LIMIT 1
		)
		WHERE emp_idx = #{emp_idx}
	</update>

	<select id="payListAll" parameterType="String"
		resultType="java.util.Map">
		SELECT
		e.emp_idx,
		u.emp_name,
		s.payment_date,
		e.pay_grade,
		e.team,
		e.position,
		e.employment_type,
		s.base_salary,
		s.bonus
		FROM employee e
		INNER JOIN users u ON e.user_idx = u.user_idx
		LEFT JOIN salary s ON e.emp_idx = s.emp_idx
		WHERE e.emp_idx = #{emp_idx}
		ORDER BY s.payment_date DESC
	</select>

	<update id="updateLatestSalary" parameterType="map">
		UPDATE salary
		SET base_salary = #{base_salary}, bonus = #{bonus}
		WHERE emp_idx = #{emp_idx}
		AND payment_date = (
		SELECT MAX(payment_date)
		FROM salary
		WHERE emp_idx = #{emp_idx}
		)
	</update>

	<select id="getLatestSalary" parameterType="String"
		resultType="map">
		SELECT base_salary, bonus,salary_id
		FROM salary
		WHERE emp_idx = #{emp_idx}
		ORDER BY payment_date DESC
		LIMIT 1
	</select>

	<update id="updatePayById" parameterType="map">
		UPDATE salary
		SET base_salary = #{base_salary},
		bonus = #{bonus}
		WHERE salary_id = #{salary_id}
	</update>
	<!-- 한찬욱 -->
	<!-- 관리자의 근무지 이동 신청을 받은 테이블 조회 -->
	<select id="getPersonChangeInfor" resultType="java.util.Map">
		SELECT 
			e.emp_id,
			e.emp_idx,
			u.emp_name,
			e.team,
			e.position,
			u.emp_email,
			r.request_text,
			r.request_personnelchange,
			pc.prev_location_id,
			pc.new_location_id,
			r.request_idx,
			rl.logging_idx,
			rl.logging_personnelchange
		FROM Request r
		LEFT JOIN employee e ON r.emp_idx = e.emp_idx
		LEFT JOIN users u ON e.user_idx = u.user_idx
		LEFT JOIN personnelchange pc ON r.request_idx = pc.request_idx
		LEFT JOIN requestlogging rl ON r.request_idx = rl.request_idx
		WHERE r.request_personnelchange = 1
		ORDER BY r.request_idx DESC
	</select>

	<!-- 이동 신청 기록 존재 여부 확인 -->
	<select id="checkRequestLoggingExists" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM requestlogging 
		WHERE request_idx = CAST(#{request_idx} AS SIGNED)
		AND logging_personnelchange IS NOT NULL
	</select>

	<!-- 이동 신청 기록 업데이트 -->
	<update id="updateLoggingpersonnelChangeStatus" parameterType="java.util.Map">
		<choose>
			<when test="recordExists == 1">
				UPDATE requestlogging rl
				INNER JOIN request r ON rl.request_idx = r.request_idx
				INNER JOIN personnelchange pc ON r.request_idx = pc.request_idx
				INNER JOIN employee e ON r.emp_idx = e.emp_idx
				SET rl.logging_personnelchange = #{logging_personnelchange},
					rl.request_text = #{request_text},
					rl.logging_date = now(),
					pc.prev_location_id = e.location,
					pc.new_location_id = #{new_location_id}
				WHERE rl.request_idx = CAST(#{request_idx} AS SIGNED)
			</when>
			<otherwise>
				INSERT INTO requestlogging
				(request_idx, logging_personnelchange, request_text, logging_date)
				VALUES(CAST(#{request_idx} AS SIGNED), #{logging_personnelchange}, #{request_text}, now())
			</otherwise>
		</choose>
	</update>

	<update id="updatePersonnelChangeLocation" parameterType="java.util.Map">
		UPDATE personnelchange pc
		INNER JOIN request r ON pc.request_idx = r.request_idx
		INNER JOIN employee e ON r.emp_idx = e.emp_idx
		SET pc.prev_location_id = e.location,
			pc.new_location_id = #{new_location_id}
		WHERE pc.request_idx = CAST(#{request_idx} AS SIGNED)
	</update>

	<!-- 이동 신청 이력 초기화 -->
	<update id="resetPersonChangeStatus">
		update request
		set request_personnelchange = 0
		where request_idx = #{request_idx}
	</update>

	<!-- 작성자: 김재겸 (05-13) -->
	<select id="getEmployeeDetails" resultType="java.util.Map">
		SELECT location, attitude_type
		FROM Employee
		WHERE emp_idx = #{emp_idx}
	</select>

	<update id="updateWorkArrangement">
		UPDATE Employee e
		INNER JOIN request r ON r.emp_idx = e.emp_idx 
		SET e.location = #{location}, e.attitude_type = #{attitude_type}, r.request_personnelchange = 1 
		WHERE e.emp_idx = #{emp_idx}
	</update>


</mapper>