<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="manager">
	<!-- 1. Users 테이블에 회원 정보 저장 -->
	<insert id="insertUser"
		parameterType="com.ict.project.vo.personnel.UsersVO"
		useGeneratedKeys="true" keyProperty="user_idx">
		INSERT INTO users (emp_email,
		emp_name, emp_password, home, detail_home,
		phone_number, gender,
		birthday)
		VALUES (#{emp_email}, #{emp_name}, #{emp_password}, #{home},
		#{detail_home},
		#{phone_number}, #{gender}, #{birthday})
	</insert>

	<!-- 2. 직원 이메일(로그인에서 아이디 역할) 중복확인 -->
	<select id="checkEmpIdxDuplicate" parameterType="String"
		resultType="int">
		SELECT COUNT(*) FROM employee WHERE emp_idx = #{empIdx}
	</select>

	<!-- 3. Employee 테이블에 직원 정보 저장 -->
	<insert id="insertEmployee"
		parameterType="com.ict.project.vo.personnel.EmployeeVO">
		INSERT INTO employee
		(user_idx,emp_idx,emp_id,position,pay_grade,hire_date,team,location,attitude_type,employment_type)
		VALUES
		(#{user_idx},#{emp_idx},#{emp_id},#{position},#{pay_grade},#{hire_date},#{team},#{location},#{attitude_type},#{employment_type})
	</insert>

	<!-- 4. Usersign 테이블에 서명 정보 저장 -->
	<insert id="insertUsersign"
		parameterType="com.ict.project.vo.personnel.pFile.UsersignVO">
		INSERT INTO usersign (user_idx)
		VALUES (#{user_idx})
	</insert>

	<!-- 5. Request 테이블에 emp_idx 저장 -->
	<insert id="insertRequest"
		parameterType="com.ict.project.vo.personnel.EmployeeVO">
		INSERT INTO request (emp_idx)
		VALUES (#{emp_idx})
	</insert>

	<!-- 6. Permission 테이블에 emp_idx 저장 -->
	<insert id="insertPermission"
		parameterType="com.ict.project.vo.personnel.EmployeeVO">
		INSERT INTO permission (emp_idx)
		VALUES (#{emp_idx})
	</insert>

	<!-- permission 테이블에서 emp_idx를 NULL로 업데이트 -->
	<delete id="removePermission" parameterType="String">
		DELETE FROM permission
		WHERE emp_idx = #{emp_idx}
	</delete>

	<!-- 7. EmpPicture 테이블에 프로필 사진 정보 저장 -->
	<insert id="insertEmpPicture"
		parameterType="com.ict.project.vo.personnel.pFile.EmpPictureVO">
		INSERT INTO emppicture (emp_idx, f_name, f_path,
		f_width, f_height)
		VALUES (#{emp_idx}, #{f_name}, #{f_path},
		#{f_width}, #{f_height})
	</insert>

	<!-- 8. 직원리스트에서 직원 데이터 불러오기 -->
	<select id="selectEmployeeList"
		resultType="com.ict.project.vo.personnel.EmployeeVO">
		SELECT *
		FROM employee
	</select>

	<!-- 9. 직원 이메일(로그인에서 아이디 역할) 중복확인 -->
	<select id="checkEmailDuplicate" resultType="int">
		SELECT COUNT(*) FROM
		users WHERE emp_email = #{email}
	</select>

	<!-- 10. 직원번호 중복확인 -->
	<select id="checkEmpIdDuplicate" resultType="int">
		SELECT COUNT(*) FROM
		employee WHERE emp_id = #{empId}
	</select>


	<!-- 12. 전화번호 중복확인 -->
	<select id="checkPhoneNumberDuplicate" parameterType="String"
		resultType="int">
		SELECT COUNT(*) FROM users WHERE phone_number =
		#{phone_Number}
	</select>

	<!-- 직원 상세조회 -->
	<select id="getEmployeeById" parameterType="String"
		resultType="java.util.Map">
		SELECT
		u.user_idx,
		e.emp_idx,
		e.emp_id,
		u.emp_name,
		e.team,
		e.position,
		u.emp_email,
		u.birthday,
		u.gender,
		u.phone_number,
		u.home,
		u.detail_home,
		e.hire_date,
		e.location,
		e.pay_grade,
		e.employment_type,
		e.attitude_type,
		e.dept_name,
		e.quitter,
		e.resignation_date,
		u.remove,
		u.emp_password,
		p.f_name,
		p.f_path,
		p.f_width,
		p.f_height
		FROM employee e
		LEFT JOIN users u ON e.user_idx = u.user_idx
		LEFT JOIN emppicture p ON e.emp_idx = p.emp_idx
		WHERE e.emp_idx = #{emp_idx}
	</select>

	<!-- 직원 정보 수정 -->
	<update id="updateEmployee"
		parameterType="com.ict.project.vo.personnel.EmployeeVO">
		UPDATE employee
		SET
		team = #{team},
		position = #{position},
		hire_date = #{hire_date},
		location = #{location},
		pay_grade = #{pay_grade},
		employment_type = #{employment_type},
		attitude_type = #{attitude_type},
		dept_name = #{dept_name},
		quitter = #{quitter},
		resignation_date = #{resignation_date}
		WHERE emp_idx = #{emp_idx}
	</update>
	<!-- 유저 정보 수정 -->
	<update id="updateUser" parameterType="java.util.Map">
		UPDATE users
		SET
		emp_name = #{emp_name},
		emp_email = #{emp_email},
		birthday = #{birthday},
		gender = #{gender},
		phone_number = #{phone_number},
		home = #{home},
		detail_home = #{detail_home}
		WHERE user_idx = #{user_idx}
	</update>

	<!-- 프로필 이미지 수정 -->
	<update id="updateProfileImage"
		parameterType="com.ict.project.vo.personnel.pFile.EmpPictureVO">
		UPDATE emppicture
		SET
		f_name = #{f_name},
		f_path = #{f_path},
		f_width = #{f_width},
		f_height = #{f_height}
		WHERE emp_idx = #{emp_idx}
	</update>


	<!-- 직원 리스트 조회 -->
	<select id="getAllEmployees" parameterType="Map"
		resultType="java.util.Map">
		SELECT
		e.emp_idx,
		e.emp_id,
		u.emp_name,
		e.team,
		e.position,
		u.emp_email,
		u.birthday,
		u.gender,
		u.phone_number,
		u.home,
		u.detail_home,
		e.hire_date,
		e.location,
		e.pay_grade,
		e.employment_type,
		e.attitude_type,
		e.dept_name,
		e.quitter,
		e.resignation_date,
		u.remove
		FROM
		users u
		JOIN
		employee e ON u.user_idx = e.user_idx
		<where>
			u.remove = 0
			<if
				test="searchType != null and keyword != null and keyword != ''">
				<choose>
					<when test="searchType == 'emp_name'">
						u.emp_name LIKE CONCAT('%', #{keyword}, '%')
					</when>
					<when test="searchType == 'emp_id'">
						e.emp_id LIKE CONCAT('%', #{keyword}, '%')
					</when>
					<when test="searchType == 'dept_name'">
						e.dept_name LIKE CONCAT('%', #{keyword}, '%')
					</when>
					<when test="searchType == 'position'">
						e.position LIKE CONCAT('%', #{keyword}, '%')
					</when>
				</choose>
			</if>
		</where>
		ORDER BY e.emp_id
	</select>
	
	<select id="list" resultType="map">
		SELECT
		p.emp_idx,
		u.emp_name,
		e.dept_name,
		p.can_access_employee,
		p.can_access_worktype,
		p.can_access_personnel,
		p.can_access_salary,
		p.can_access_vacation
		FROM Permission p
		INNER JOIN Employee e ON p.emp_idx = e.emp_idx
		INNER JOIN Users u ON e.user_idx = u.user_idx
		WHERE e.dept_name = '관리자'
	</select>

	<select id="getResignEmployees" resultType="java.util.Map">
    SELECT
       e.emp_idx,
		e.emp_id,
		u.emp_name,
		e.team,
		e.position,
		u.emp_email,
		u.birthday,
		u.gender,
		u.phone_number,
		u.home,
		u.detail_home,
		e.hire_date,
		e.location,
		e.pay_grade,
		e.employment_type,
		e.attitude_type,
		e.dept_name,
		e.quitter,
		e.resignation_date,
		u.remove
    FROM
        users u
    JOIN
        employee e ON u.user_idx = e.user_idx
    WHERE e.quitter = '퇴사대기' OR u.remove = 1
    ORDER BY e.emp_id
</select>
	
	
	

    <update id="updatePermissions" parameterType="map">
        UPDATE Permission
        SET can_access_employee = #{permissions.can_access_employee},
            can_access_worktype = #{permissions.can_access_worktype},
            can_access_personnel = #{permissions.can_access_personnel},
            can_access_salary = #{permissions.can_access_salary},
            can_access_vacation = #{permissions.can_access_vacation}
        WHERE emp_idx = #{userId}
    </update>

    
    <select id="resignList" resultType="Map">
select * 
from Employee e
join users u on u.user_idx= e.user_idx
where u.remove = 0;
</select>

<select id="keyword" parameterType="map" resultType="map">
    SELECT *
    FROM Employee e
    JOIN users u ON u.user_idx = e.user_idx
    WHERE
   <choose>
    <when test="searchType == 'emp_id'">
        e.emp_id LIKE #{keyword} AND u.remove = 0
    </when>
    <when test="searchType == 'emp_name'">
        u.emp_name LIKE #{keyword} AND u.remove = 0
    </when>
    <when test="searchType == 'team'">
        e.team LIKE #{keyword} AND u.remove = 0
    </when>
    <when test="searchType == 'position'">
        e.position LIKE #{keyword} AND u.remove = 0
    </when>
    <when test="searchType == 'quitter'">
        e.quitter = #{keyword}
    </when>
    <otherwise>
        1=1
    </otherwise>
</choose>
</select>

<update id="update" parameterType="map">
 UPDATE Employee
 SET quitter = #{quitter}
 <if test="quitter == '퇴사'">
        , resignation_date = NOW()
    </if>
 WHERE emp_id = #{emp_id}
</update>

<update id="updateUserRemove" parameterType="map">
    UPDATE users
    SET remove = 
        <choose>
            <when test="quitter == '퇴사'">1</when>
            <otherwise>0</otherwise>
        </choose>
    WHERE user_idx = (SELECT user_idx FROM Employee WHERE emp_id = #{emp_id})
</update>
    
    
</mapper>